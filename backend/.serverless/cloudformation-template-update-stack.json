{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-getUser"
      }
    },
    "CreateUserOnSignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-createUserOnSignUp"
      }
    },
    "CompleteOnboardingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-completeOnboarding"
      }
    },
    "CreateLinkTokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-createLinkToken"
      }
    },
    "ExchangePublicTokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-exchangePublicToken"
      }
    },
    "AddItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-addItem"
      }
    },
    "DeleteItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-deleteItem"
      }
    },
    "GetItemsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/wealthtracker-dev-getItems"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "wealthtracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wealthtracker-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wealthtracker-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "wealthtracker",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ]
      }
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/user/getUser/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "CreateUserOnSignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/user/createUserOnSignUp/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-createUserOnSignUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserOnSignUpLogGroup"
      ]
    },
    "CompleteOnboardingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/onboarding/completeOnboarding/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-completeOnboarding",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CompleteOnboardingLogGroup"
      ]
    },
    "CreateLinkTokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/plaid/createLinkToken/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-createLinkToken",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateLinkTokenLogGroup"
      ]
    },
    "ExchangePublicTokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/plaid/exchangePublicToken/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-exchangePublicToken",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExchangePublicTokenLogGroup"
      ]
    },
    "AddItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/items/addItem/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-addItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddItemLogGroup"
      ]
    },
    "DeleteItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/items/deleteItem/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-deleteItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteItemLogGroup"
      ]
    },
    "GetItemsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/wealthtracker/dev/1621217822277-2021-05-17T02:17:02.277Z/wealthtracker.zip"
        },
        "Handler": "src/functions/items/getItems/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "wealthtracker-dev-getItems",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USER_TABLE": "wealthtracker-user-dev",
            "ITEMS_TABLE_PLAID_SANDBOX": "wealthtracker-items-plaid_sandbox-dev",
            "ITEMS_TABLE_PLAID_DEVELOPMENT": "wealthtracker-items-plaid_development-dev",
            "ITEMS_TABLE_PLAID_PRODUCTION": "wealthtracker-items-plaid_production-dev",
            "REGION": "us-east-2",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "PARAMETERS_PATH": "/wealthtracker/dev",
            "PLAID_CLIENT_ID_PATH": "/wealthtracker/dev/plaid_client_id",
            "PLAID_SECRET_PATH": "/wealthtracker/dev/plaid_secret",
            "PLAID_ENV_PATH": "/wealthtracker/dev/plaid_env",
            "PLAID_PRODUCTS_PATH": "/wealthtracker/dev/plaid_products",
            "PLAID_COUNTRY_CODES_PATH": "/wealthtracker/dev/plaid_country_codes"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetItemsLogGroup"
      ]
    },
    "GetUserLambdaVersion89chDzdFnox5iE07i5iZ5k3GwER8603ioC5PbryF5aA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "CreateUserOnSignUpLambdaVersion6NMVTcLqraApjXkNyZ4XpSr3FWVbVhXFTTs1RMsY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserOnSignUpLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "CompleteOnboardingLambdaVersionMKjXjMGiNlxOq311qf1NNtInSbKJUBFSgFu0lvKFk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CompleteOnboardingLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "CreateLinkTokenLambdaVersion0dLshdjBhxcBDjdVgbI24gMAmPrRnR6wFV8wDmbVIA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateLinkTokenLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "ExchangePublicTokenLambdaVersionCQ8BfTBzmBhQHljJpHDWgI8m9IC159ZHJoHtXO9wUS0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExchangePublicTokenLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "AddItemLambdaVersioneNvF17VwAUE9uTbDkhPghH0uBkuXtloQwXSAVNxKI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddItemLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "DeleteItemLambdaVersionqoE0DweltxOH6fggzE7hf3EMsd8NY7cSN4pD0k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteItemLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "GetItemsLambdaVersionB6woknzY7Js7zvweaMnCOiHtf5X0FbcOjoCBqkRYfUU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetItemsLambdaFunction"
        },
        "CodeSha256": "Lh5hTbinpEiEAd6/dtxJeNHnEidN9B22PGb3qrWrBYA="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "wealthtracker-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOnboarding": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "onboarding",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOnboardingComplete": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceOnboarding"
        },
        "PathPart": "complete",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaid": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "plaid",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaidLink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePlaid"
        },
        "PathPart": "link",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaidLinkToken": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePlaidLink"
        },
        "PathPart": "token",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaidItem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePlaid"
        },
        "PathPart": "item",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaidItemPublictoken": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePlaidItem"
        },
        "PathPart": "public_token",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePlaidItemPublictokenExchange": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePlaidItemPublictoken"
        },
        "PathPart": "exchange",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceItem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "item",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceItems": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "items",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOnboardingCompleteOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOnboardingComplete"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPlaidLinkTokenOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePlaidLinkToken"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPlaidItemPublictokenExchangeOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePlaidItemPublictokenExchange"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodItemOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceItem"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodItemsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceItems"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodOnboardingCompletePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOnboardingComplete"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CompleteOnboardingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPlaidLinkTokenGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePlaidLinkToken"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateLinkTokenLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPlaidItemPublictokenExchangePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePlaidItemPublictokenExchange"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExchangePublicTokenLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodItemPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceItem"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodItemDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceItem"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodItemsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceItems"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "userPoolAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetItemsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1621217812029": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodUserOptions",
        "ApiGatewayMethodOnboardingCompleteOptions",
        "ApiGatewayMethodPlaidLinkTokenOptions",
        "ApiGatewayMethodPlaidItemPublictokenExchangeOptions",
        "ApiGatewayMethodItemOptions",
        "ApiGatewayMethodItemsOptions",
        "ApiGatewayMethodUserGet",
        "ApiGatewayMethodOnboardingCompletePost",
        "ApiGatewayMethodPlaidLinkTokenGet",
        "ApiGatewayMethodPlaidItemPublictokenExchangePost",
        "ApiGatewayMethodItemPost",
        "ApiGatewayMethodItemDelete",
        "ApiGatewayMethodItemsGet"
      ]
    },
    "GetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CompleteOnboardingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CompleteOnboardingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateLinkTokenLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateLinkTokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ExchangePublicTokenLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExchangePublicTokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetItemsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetItemsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CognitoUserPoolMyUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "wealthtracker-user-pool--dev",
        "LambdaConfig": {
          "PostConfirmation": {
            "Fn::GetAtt": [
              "CreateUserOnSignUpLambdaFunction",
              "Arn"
            ]
          }
        },
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        },
        "AdminCreateUserConfig": {},
        "AliasAttributes": [],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "DeviceConfiguration": {},
        "EmailConfiguration": {},
        "EnabledMfas": [],
        "MfaConfiguration": "OFF",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": false,
            "RequireNumbers": false,
            "RequireSymbols": false,
            "RequireUppercase": false,
            "TemporaryPasswordValidityDays": 7
          }
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "name",
            "NumberAttributeConstraints": {},
            "Required": true,
            "StringAttributeConstraints": {}
          }
        ],
        "UsernameAttributes": [
          "email"
        ],
        "UsernameConfiguration": {
          "CaseSensitive": false
        },
        "UserPoolTags": {},
        "VerificationMessageTemplate": {}
      },
      "DependsOn": [
        "CreateUserOnSignUpLambdaFunction"
      ]
    },
    "CreateUserOnSignUpLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePostConfirmation": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserOnSignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolMyUserPool",
            "Arn"
          ]
        }
      }
    },
    "userTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "wealthtracker-user-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      },
      "DeletionPolicy": "Delete"
    },
    "itemsTableSandbox": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "wealthtracker-items-plaid_sandbox-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "itemId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "itemId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      },
      "DeletionPolicy": "Delete"
    },
    "itemsTableDevelopment": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "wealthtracker-items-plaid_development-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "itemId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "itemId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      },
      "DeletionPolicy": "Delete"
    },
    "itemsTableProduction": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "wealthtracker-items-plaid_production-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "itemId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "itemId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      },
      "DeletionPolicy": "Delete"
    },
    "UserPoolClientWealthTrackerNativeClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "AccessTokenValidity": 60,
        "AllowedOAuthFlows": [],
        "AllowedOAuthFlowsUserPoolClient": false,
        "AllowedOAuthScopes": [],
        "CallbackURLs": [],
        "ClientName": "wealthtracker-native-app--dev",
        "GenerateSecret": true,
        "IdTokenValidity": 60,
        "PreventUserExistenceErrors": "ENABLED",
        "ReadAttributes": [
          "email",
          "email_verified",
          "name"
        ],
        "RefreshTokenValidity": 30,
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "IdToken": "minutes",
          "RefreshToken": "days"
        },
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        },
        "WriteAttributes": [
          "name"
        ]
      }
    },
    "UserPoolClientWealthTrackerWebClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "AccessTokenValidity": 60,
        "AllowedOAuthFlows": [],
        "AllowedOAuthFlowsUserPoolClient": false,
        "AllowedOAuthScopes": [],
        "CallbackURLs": [],
        "ClientName": "wealthtracker-web-angular-app--dev",
        "GenerateSecret": false,
        "IdTokenValidity": 60,
        "PreventUserExistenceErrors": "ENABLED",
        "ReadAttributes": [
          "email",
          "email_verified",
          "name"
        ],
        "RefreshTokenValidity": 30,
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "IdToken": "minutes",
          "RefreshToken": "days"
        },
        "UserPoolId": {
          "Ref": "CognitoUserPoolMyUserPool"
        },
        "WriteAttributes": [
          "name"
        ]
      }
    },
    "IdentityPoolMyIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "AllowClassicFlow": false,
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "UserPoolClientWealthTrackerWebClient"
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "CognitoUserPoolMyUserPool",
                "ProviderName"
              ]
            },
            "ServerSideTokenCheck": true
          }
        ],
        "IdentityPoolName": "wealthtracker_identity_pool__dev",
        "SupportedLoginProviders": {}
      }
    },
    "IdentityPoolAuthenticatedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Description": "",
        "MaxSessionDuration": 3600,
        "Path": "/",
        "RoleName": "wealthtracker-identity-pool-authRole-dev",
        "Tags": []
      }
    },
    "IdentityPoolUnAuthenticatedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Description": "",
        "MaxSessionDuration": 3600,
        "Path": "/",
        "RoleName": "wealthtracker-identity-pool-unauthRole-dev",
        "Tags": []
      }
    },
    "IdentitypoolRoleAttachmentMap": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "IdentityPoolMyIdentityPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "IdentityPoolAuthenticatedRole",
              "Arn"
            ]
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "IdentityPoolUnAuthenticatedRole",
              "Arn"
            ]
          }
        }
      }
    },
    "userPoolAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "UserPoolAuthorizer",
        "ProviderARNs": [
          {
            "Fn::GetAtt": [
              "CognitoUserPoolMyUserPool",
              "Arn"
            ]
          }
        ],
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersion89chDzdFnox5iE07i5iZ5k3GwER8603ioC5PbryF5aA"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserOnSignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserOnSignUpLambdaVersion6NMVTcLqraApjXkNyZ4XpSr3FWVbVhXFTTs1RMsY"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-CreateUserOnSignUpLambdaFunctionQualifiedArn"
      }
    },
    "CompleteOnboardingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CompleteOnboardingLambdaVersionMKjXjMGiNlxOq311qf1NNtInSbKJUBFSgFu0lvKFk"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-CompleteOnboardingLambdaFunctionQualifiedArn"
      }
    },
    "CreateLinkTokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateLinkTokenLambdaVersion0dLshdjBhxcBDjdVgbI24gMAmPrRnR6wFV8wDmbVIA"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-CreateLinkTokenLambdaFunctionQualifiedArn"
      }
    },
    "ExchangePublicTokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExchangePublicTokenLambdaVersionCQ8BfTBzmBhQHljJpHDWgI8m9IC159ZHJoHtXO9wUS0"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-ExchangePublicTokenLambdaFunctionQualifiedArn"
      }
    },
    "AddItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddItemLambdaVersioneNvF17VwAUE9uTbDkhPghH0uBkuXtloQwXSAVNxKI"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-AddItemLambdaFunctionQualifiedArn"
      }
    },
    "DeleteItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteItemLambdaVersionqoE0DweltxOH6fggzE7hf3EMsd8NY7cSN4pD0k"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-DeleteItemLambdaFunctionQualifiedArn"
      }
    },
    "GetItemsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetItemsLambdaVersionB6woknzY7Js7zvweaMnCOiHtf5X0FbcOjoCBqkRYfUU"
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-GetItemsLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-wealthtracker-dev-ServiceEndpoint"
      }
    }
  }
}