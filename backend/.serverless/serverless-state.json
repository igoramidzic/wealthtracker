{
  "service": {
    "service": "wealthtracker",
    "serviceObject": {
      "name": "wealthtracker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "us-east-2",
      "apiGateway": {
        "minimumCompressionSize": 1024,
        "shouldStartNameWithService": true
      },
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
      },
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wealthtracker-dev-getUser"
            }
          },
          "CreateUserOnSignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wealthtracker-dev-createUserOnSignUp"
            }
          },
          "CompleteOnboardingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wealthtracker-dev-completeOnboarding"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "wealthtracker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wealthtracker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/wealthtracker-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "wealthtracker",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wealthtracker/dev/1620863025120-2021-05-12T23:43:45.120Z/wealthtracker.zip"
              },
              "Handler": "src/functions/user/getUser/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wealthtracker-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
                  "DYNAMODB_USER_TABLE_REGION": "us-east-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "CreateUserOnSignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wealthtracker/dev/1620863025120-2021-05-12T23:43:45.120Z/wealthtracker.zip"
              },
              "Handler": "src/functions/user/createUserOnSignUp/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wealthtracker-dev-createUserOnSignUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
                  "DYNAMODB_USER_TABLE_REGION": "us-east-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserOnSignUpLogGroup"
            ]
          },
          "CompleteOnboardingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wealthtracker/dev/1620863025120-2021-05-12T23:43:45.120Z/wealthtracker.zip"
              },
              "Handler": "src/functions/onboarding/completeOnboarding/handler.main",
              "Runtime": "nodejs14.x",
              "FunctionName": "wealthtracker-dev-completeOnboarding",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
                  "DYNAMODB_USER_TABLE_REGION": "us-east-2"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CompleteOnboardingLogGroup"
            ]
          },
          "GetUserLambdaVersionVfuv4CCLG5D2RAtdCiH2K4AD5SSXojRsspa6VmLsIM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "qWQZEpr3bsunWX9W3YS0XGM/5ctOugcP/kHgoocRDVU="
            }
          },
          "CreateUserOnSignUpLambdaVersionHtzVlCKQ2H65ATYk5FDD4MUTIbHDDdkxes3rtEWDOcM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserOnSignUpLambdaFunction"
              },
              "CodeSha256": "qWQZEpr3bsunWX9W3YS0XGM/5ctOugcP/kHgoocRDVU="
            }
          },
          "CompleteOnboardingLambdaVersionE6hK9LwRhVcOlUyGOP1ZYXKvmZJ1XJQNNbWv8nGgXM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CompleteOnboardingLambdaFunction"
              },
              "CodeSha256": "qWQZEpr3bsunWX9W3YS0XGM/5ctOugcP/kHgoocRDVU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "wealthtracker-dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOnboarding": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "onboarding",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOnboardingComplete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOnboarding"
              },
              "PathPart": "complete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOnboardingCompleteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOnboardingComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "userPoolAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOnboardingCompletePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOnboardingComplete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "userPoolAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CompleteOnboardingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1620863015444": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUserOptions",
              "ApiGatewayMethodOnboardingCompleteOptions",
              "ApiGatewayMethodUserGet",
              "ApiGatewayMethodOnboardingCompletePost"
            ]
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CompleteOnboardingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CompleteOnboardingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CognitoUserPoolMyUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "wealthtracker-user-pool--dev",
              "LambdaConfig": {
                "PostConfirmation": {
                  "Fn::GetAtt": [
                    "CreateUserOnSignUpLambdaFunction",
                    "Arn"
                  ]
                }
              },
              "AccountRecoverySetting": {
                "RecoveryMechanisms": [
                  {
                    "Name": "verified_email",
                    "Priority": 1
                  }
                ]
              },
              "AdminCreateUserConfig": {},
              "AliasAttributes": [],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "DeviceConfiguration": {},
              "EmailConfiguration": {},
              "EnabledMfas": [],
              "MfaConfiguration": "OFF",
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireLowercase": false,
                  "RequireNumbers": false,
                  "RequireSymbols": false,
                  "RequireUppercase": false,
                  "TemporaryPasswordValidityDays": 7
                }
              },
              "Schema": [
                {
                  "AttributeDataType": "String",
                  "DeveloperOnlyAttribute": false,
                  "Mutable": true,
                  "Name": "name",
                  "NumberAttributeConstraints": {},
                  "Required": true,
                  "StringAttributeConstraints": {}
                }
              ],
              "UsernameAttributes": [
                "email"
              ],
              "UsernameConfiguration": {
                "CaseSensitive": false
              },
              "UserPoolTags": {},
              "VerificationMessageTemplate": {}
            },
            "DependsOn": [
              "CreateUserOnSignUpLambdaFunction"
            ]
          },
          "CreateUserOnSignUpLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePostConfirmation": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserOnSignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPoolMyUserPool",
                  "Arn"
                ]
              }
            }
          },
          "userTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "wealthtracker-user-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            },
            "DeletionPolicy": "Delete"
          },
          "UserPoolClientWealthTrackerNativeClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "AccessTokenValidity": 60,
              "AllowedOAuthFlows": [],
              "AllowedOAuthFlowsUserPoolClient": false,
              "AllowedOAuthScopes": [],
              "CallbackURLs": [],
              "ClientName": "wealthtracker-native-app--dev",
              "GenerateSecret": true,
              "IdTokenValidity": 60,
              "PreventUserExistenceErrors": "ENABLED",
              "ReadAttributes": [
                "email",
                "email_verified",
                "name"
              ],
              "RefreshTokenValidity": 30,
              "TokenValidityUnits": {
                "AccessToken": "minutes",
                "IdToken": "minutes",
                "RefreshToken": "days"
              },
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              },
              "WriteAttributes": [
                "name"
              ]
            }
          },
          "UserPoolClientWealthTrackerWebClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "AccessTokenValidity": 60,
              "AllowedOAuthFlows": [],
              "AllowedOAuthFlowsUserPoolClient": false,
              "AllowedOAuthScopes": [],
              "CallbackURLs": [],
              "ClientName": "wealthtracker-web-angular-app--dev",
              "GenerateSecret": false,
              "IdTokenValidity": 60,
              "PreventUserExistenceErrors": "ENABLED",
              "ReadAttributes": [
                "email",
                "email_verified",
                "name"
              ],
              "RefreshTokenValidity": 30,
              "TokenValidityUnits": {
                "AccessToken": "minutes",
                "IdToken": "minutes",
                "RefreshToken": "days"
              },
              "UserPoolId": {
                "Ref": "CognitoUserPoolMyUserPool"
              },
              "WriteAttributes": [
                "name"
              ]
            }
          },
          "IdentityPoolMyIdentityPool": {
            "Type": "AWS::Cognito::IdentityPool",
            "Properties": {
              "AllowClassicFlow": false,
              "AllowUnauthenticatedIdentities": false,
              "CognitoIdentityProviders": [
                {
                  "ClientId": {
                    "Ref": "UserPoolClientWealthTrackerWebClient"
                  },
                  "ProviderName": {
                    "Fn::GetAtt": [
                      "CognitoUserPoolMyUserPool",
                      "ProviderName"
                    ]
                  },
                  "ServerSideTokenCheck": true
                }
              ],
              "IdentityPoolName": "wealthtracker_identity_pool__dev",
              "SupportedLoginProviders": {}
            }
          },
          "IdentityPoolAuthenticatedRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity"
                  }
                ]
              },
              "Description": "",
              "MaxSessionDuration": 3600,
              "Path": "/",
              "RoleName": "wealthtracker-identity-pool-authRole-dev",
              "Tags": []
            }
          },
          "IdentityPoolUnAuthenticatedRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity"
                  }
                ]
              },
              "Description": "",
              "MaxSessionDuration": 3600,
              "Path": "/",
              "RoleName": "wealthtracker-identity-pool-unauthRole-dev",
              "Tags": []
            }
          },
          "IdentitypoolRoleAttachmentMap": {
            "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties": {
              "IdentityPoolId": {
                "Ref": "IdentityPoolMyIdentityPool"
              },
              "Roles": {
                "authenticated": {
                  "Fn::GetAtt": [
                    "IdentityPoolAuthenticatedRole",
                    "Arn"
                  ]
                },
                "unauthenticated": {
                  "Fn::GetAtt": [
                    "IdentityPoolUnAuthenticatedRole",
                    "Arn"
                  ]
                }
              }
            }
          },
          "userPoolAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "UserPoolAuthorizer",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "CognitoUserPoolMyUserPool",
                    "Arn"
                  ]
                }
              ],
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-wealthtracker-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionVfuv4CCLG5D2RAtdCiH2K4AD5SSXojRsspa6VmLsIM"
            },
            "Export": {
              "Name": "sls-wealthtracker-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserOnSignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserOnSignUpLambdaVersionHtzVlCKQ2H65ATYk5FDD4MUTIbHDDdkxes3rtEWDOcM"
            },
            "Export": {
              "Name": "sls-wealthtracker-dev-CreateUserOnSignUpLambdaFunctionQualifiedArn"
            }
          },
          "CompleteOnboardingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CompleteOnboardingLambdaVersionE6hK9LwRhVcOlUyGOP1ZYXKvmZJ1XJQNNbWv8nGgXM"
            },
            "Export": {
              "Name": "sls-wealthtracker-dev-CompleteOnboardingLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-wealthtracker-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getUser": {
        "handler": "src/functions/user/getUser/handler.main",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "user",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "userPoolAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
          "DYNAMODB_USER_TABLE_REGION": "us-east-2"
        },
        "name": "wealthtracker-dev-getUser",
        "package": {
          "artifact": ".serverless/wealthtracker.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionVfuv4CCLG5D2RAtdCiH2K4AD5SSXojRsspa6VmLsIM"
      },
      "createUserOnSignUp": {
        "handler": "src/functions/user/createUserOnSignUp/handler.main",
        "events": [
          {
            "cognitoUserPool": {
              "pool": "MyUserPool",
              "trigger": "PostConfirmation"
            }
          }
        ],
        "environment": {
          "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
          "DYNAMODB_USER_TABLE_REGION": "us-east-2"
        },
        "name": "wealthtracker-dev-createUserOnSignUp",
        "package": {
          "artifact": ".serverless/wealthtracker.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateUserOnSignUpLambdaVersionHtzVlCKQ2H65ATYk5FDD4MUTIbHDDdkxes3rtEWDOcM"
      },
      "completeOnboarding": {
        "handler": "src/functions/onboarding/completeOnboarding/handler.main",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "onboarding/complete",
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "userPoolAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "DYNAMODB_USER_TABLE": "wealthtracker-user-dev",
          "DYNAMODB_USER_TABLE_REGION": "us-east-2"
        },
        "name": "wealthtracker-dev-completeOnboarding",
        "package": {
          "artifact": ".serverless/wealthtracker.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CompleteOnboardingLambdaVersionE6hK9LwRhVcOlUyGOP1ZYXKvmZJ1XJQNNbWv8nGgXM"
      }
    },
    "resources": {
      "Resources": {
        "userTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "wealthtracker-user-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          },
          "DeletionPolicy": "Delete"
        },
        "CognitoUserPoolMyUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "AccountRecoverySetting": {
              "RecoveryMechanisms": [
                {
                  "Name": "verified_email",
                  "Priority": 1
                }
              ]
            },
            "AdminCreateUserConfig": {},
            "AliasAttributes": [],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "DeviceConfiguration": {},
            "EmailConfiguration": {},
            "EnabledMfas": [],
            "LambdaConfig": {},
            "MfaConfiguration": "OFF",
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireLowercase": false,
                "RequireNumbers": false,
                "RequireSymbols": false,
                "RequireUppercase": false,
                "TemporaryPasswordValidityDays": 7
              }
            },
            "Schema": [
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "name",
                "NumberAttributeConstraints": {},
                "Required": true,
                "StringAttributeConstraints": {}
              }
            ],
            "UsernameAttributes": [
              "email"
            ],
            "UsernameConfiguration": {
              "CaseSensitive": false
            },
            "UserPoolName": "wealthtracker-user-pool--dev",
            "UserPoolTags": {},
            "VerificationMessageTemplate": {}
          }
        },
        "UserPoolClientWealthTrackerNativeClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "AccessTokenValidity": 60,
            "AllowedOAuthFlows": [],
            "AllowedOAuthFlowsUserPoolClient": false,
            "AllowedOAuthScopes": [],
            "CallbackURLs": [],
            "ClientName": "wealthtracker-native-app--dev",
            "GenerateSecret": true,
            "IdTokenValidity": 60,
            "PreventUserExistenceErrors": "ENABLED",
            "ReadAttributes": [
              "email",
              "email_verified",
              "name"
            ],
            "RefreshTokenValidity": 30,
            "TokenValidityUnits": {
              "AccessToken": "minutes",
              "IdToken": "minutes",
              "RefreshToken": "days"
            },
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            },
            "WriteAttributes": [
              "name"
            ]
          }
        },
        "UserPoolClientWealthTrackerWebClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "AccessTokenValidity": 60,
            "AllowedOAuthFlows": [],
            "AllowedOAuthFlowsUserPoolClient": false,
            "AllowedOAuthScopes": [],
            "CallbackURLs": [],
            "ClientName": "wealthtracker-web-angular-app--dev",
            "GenerateSecret": false,
            "IdTokenValidity": 60,
            "PreventUserExistenceErrors": "ENABLED",
            "ReadAttributes": [
              "email",
              "email_verified",
              "name"
            ],
            "RefreshTokenValidity": 30,
            "TokenValidityUnits": {
              "AccessToken": "minutes",
              "IdToken": "minutes",
              "RefreshToken": "days"
            },
            "UserPoolId": {
              "Ref": "CognitoUserPoolMyUserPool"
            },
            "WriteAttributes": [
              "name"
            ]
          }
        },
        "IdentityPoolMyIdentityPool": {
          "Type": "AWS::Cognito::IdentityPool",
          "Properties": {
            "AllowClassicFlow": false,
            "AllowUnauthenticatedIdentities": false,
            "CognitoIdentityProviders": [
              {
                "ClientId": {
                  "Ref": "UserPoolClientWealthTrackerWebClient"
                },
                "ProviderName": {
                  "Fn::GetAtt": [
                    "CognitoUserPoolMyUserPool",
                    "ProviderName"
                  ]
                },
                "ServerSideTokenCheck": true
              }
            ],
            "IdentityPoolName": "wealthtracker_identity_pool__dev",
            "SupportedLoginProviders": {}
          }
        },
        "IdentityPoolAuthenticatedRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity"
                }
              ]
            },
            "Description": "",
            "MaxSessionDuration": 3600,
            "Path": "/",
            "RoleName": "wealthtracker-identity-pool-authRole-dev",
            "Tags": []
          }
        },
        "IdentityPoolUnAuthenticatedRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity"
                }
              ]
            },
            "Description": "",
            "MaxSessionDuration": 3600,
            "Path": "/",
            "RoleName": "wealthtracker-identity-pool-unauthRole-dev",
            "Tags": []
          }
        },
        "IdentitypoolRoleAttachmentMap": {
          "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
          "Properties": {
            "IdentityPoolId": {
              "Ref": "IdentityPoolMyIdentityPool"
            },
            "Roles": {
              "authenticated": {
                "Fn::GetAtt": [
                  "IdentityPoolAuthenticatedRole",
                  "Arn"
                ]
              },
              "unauthenticated": {
                "Fn::GetAtt": [
                  "IdentityPoolUnAuthenticatedRole",
                  "Arn"
                ]
              }
            }
          }
        },
        "userPoolAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "IdentitySource": "method.request.header.Authorization",
            "Name": "UserPoolAuthorizer",
            "ProviderARNs": [
              {
                "Fn::GetAtt": [
                  "CognitoUserPoolMyUserPool",
                  "Arn"
                ]
              }
            ],
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.ts",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "useDotenv": true,
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/wealthtracker/dev/1620863025120-2021-05-12T23:43:45.120Z",
    "artifact": ""
  }
}