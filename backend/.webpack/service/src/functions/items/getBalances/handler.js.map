{"version":3,"sources":["webpack://serverless/./src/functions/plaid/utils/item_table_env.ts","webpack://serverless/./src/functions/plaid/utils/plaid.ts","webpack://serverless/./src/libs/apiGateway.ts","webpack://serverless/./src/libs/lambda.ts","webpack://serverless/./src/models/plaid.ts","webpack://serverless/./src/secrets/secrets.ts","webpack://serverless/external \"@middy/core\"","webpack://serverless/external \"@middy/http-json-body-parser\"","webpack://serverless/external \"aws-sdk\"","webpack://serverless/external \"plaid\"","webpack://serverless/external \"source-map-support/register\"","webpack://serverless/webpack/bootstrap","webpack://serverless/webpack/runtime/compat get default export","webpack://serverless/webpack/runtime/define property getters","webpack://serverless/webpack/runtime/hasOwnProperty shorthand","webpack://serverless/webpack/runtime/make namespace object","webpack://serverless/./src/functions/items/getBalances/handler.ts"],"names":["getItemsTableName","plaidEnv","process","env","ITEMS_TABLE_PLAID_SANDBOX","ITEMS_TABLE_PLAID_DEVELOPMENT","ITEMS_TABLE_PLAID_PRODUCTION","createPlaidClient","config","Client","clientID","client_id","secret","environments","options","version","formatJSONResponse","statusCode","response","body","JSON","stringify","headers","middyfy","handler","use","EPlaidEnvironment","getParameterValue","parameters","path","filter","parameter","Name","Value","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","ddb","ssm","main","async","event","context","userId","requestContext","authorizer","claims","sub","console","log","getParametersByPath","Path","PARAMETERS_PATH","promise","Parameters","e","itemsTableName","PLAID_ENV_PATH","item","itemId","error","ddbParams","TableName","Key","res","Item","accounts","plaidClient","PLAID_CLIENT_ID_PATH","PLAID_SECRET_PATH","getBalance","accessToken","updatedAccounts","forEach","account","push","accountId","account_id","balances","current","available","isoCurrencyCode","iso_currency_code","mask","name","officialName","official_name","type","subtype","params","UpdateExpression","ExpressionAttributeValues","ReturnValues","update"],"mappings":"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","file":"src/functions/items/getBalances/handler.js","sourcesContent":["import { EPlaidEnvironment } from \"src/models/plaid\"\n\nexport const getItemsTableName = (plaidEnv: EPlaidEnvironment): string => {\n    switch (plaidEnv) {\n        case EPlaidEnvironment.SANDBOX:\n            return process.env.ITEMS_TABLE_PLAID_SANDBOX;\n        case EPlaidEnvironment.DEVELOPMENT:\n            return process.env.ITEMS_TABLE_PLAID_DEVELOPMENT;\n        case EPlaidEnvironment.PRODUCTION:\n            return process.env.ITEMS_TABLE_PLAID_PRODUCTION;\n        default:\n            return process.env.ITEMS_TABLE_PLAID_SANDBOX;\n    }\n}","import { Client, environments } from \"plaid\";\nimport { EPlaidEnvironment } from \"src/models/plaid\";\n\nexport const createPlaidClient = (config: { client_id: string, secret: string, env: EPlaidEnvironment }) => {\n  return new Client({\n    clientID: config.client_id,\n    secret: config.secret,\n    env: environments[config.env],\n    options: {\n      version: '2019-05-29',\n    },\n  });\n}","import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\nimport type { FromSchema } from \"json-schema-to-ts\";\n\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\n\nexport const formatJSONResponse = (statusCode: number, response: Record<string, unknown>) => {\n  return {\n    statusCode: statusCode,\n    body: JSON.stringify(response),\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true,\n    }\n  }\n}\n","import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n","export enum EPlaidEnvironment {\n    SANDBOX = 'sandbox',\n    DEVELOPMENT = 'development',\n    PRODUCTION = 'production'\n}","import { Parameter } from \"aws-sdk/clients/ssm\";\n\nexport const getParameterValue = (parameters: Parameter[], path: string): string => {\n    return parameters.filter(parameter => parameter.Name == path)[0].Value;\n}","module.exports = require(\"@middy/core\");;","module.exports = require(\"@middy/http-json-body-parser\");;","module.exports = require(\"aws-sdk\");;","module.exports = require(\"plaid\");;","module.exports = require(\"source-map-support/register\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import 'source-map-support/register';\n\nimport type { ValidatedEventAPIGatewayProxyEvent } from '@libs/apiGateway';\nimport { formatJSONResponse } from '@libs/apiGateway';\nimport { middyfy } from '@libs/lambda';\n\nimport schema from './schema';\nimport * as aws from 'aws-sdk';\nimport { IItem } from 'src/models/item';\nimport { getItemsTableName } from '@functions/plaid/utils/item_table_env';\nimport { EPlaidEnvironment } from 'src/models/plaid';\nimport { getParameterValue } from 'src/secrets/secrets';\nimport { Parameter } from 'aws-sdk/clients/ssm';\nimport { createPlaidClient } from '@functions/plaid/utils/plaid';\nimport { IAccount } from 'src/models/account';\nimport { Account } from 'plaid';\n\nconst ddb = new aws.DynamoDB.DocumentClient()\nconst ssm = new aws.SSM();\n\nconst getBalances: ValidatedEventAPIGatewayProxyEvent<typeof schema> = async (event, context) => {\n  let userId = event.requestContext.authorizer.claims.sub;\n\n  console.log(1);\n  let parameters: Parameter[];\n  try {\n    let res = await ssm.getParametersByPath({ Path: process.env.PARAMETERS_PATH }).promise();\n    parameters = res.Parameters;\n  } catch (e) {\n    console.log(e);\n    return formatJSONResponse(500, null);\n  }\n\n  console.log(2);\n  const itemsTableName = getItemsTableName(<EPlaidEnvironment>getParameterValue(parameters, process.env.PLAID_ENV_PATH));\n\n  let itemId: string = <string>(event.body.itemId);\n  if (!itemId || typeof itemId != \"string\")\n    return formatJSONResponse(400, { error: 'Invalid itemId provided' });\n\n  let item: IItem;\n  try {\n    let ddbParams = {\n      TableName: itemsTableName,\n      Key: {\n        userId,\n        itemId\n      }\n    };\n    console.log(ddbParams);\n\n    let res = await ddb.get(ddbParams).promise();\n    item = <IItem>({ ...res.Item });\n    console.log(4);\n    if (!res.Item == null)\n      return formatJSONResponse(500, null);\n  } catch (e) {\n    console.log(5);\n    console.log(e);\n    return formatJSONResponse(500, null);\n  }\n\n  let plaidClient = createPlaidClient({\n    client_id: getParameterValue(parameters, process.env.PLAID_CLIENT_ID_PATH),\n    secret: getParameterValue(parameters, process.env.PLAID_SECRET_PATH),\n    env: <EPlaidEnvironment>getParameterValue(parameters, process.env.PLAID_ENV_PATH),\n  });\n\n  let accounts: Account[];\n  try {\n    let res = await plaidClient.getBalance(item.accessToken);\n    console.log(6);\n    accounts = res.accounts;\n  } catch (e) {\n    console.log(e);\n    console.log(7);\n    return formatJSONResponse(500, null);\n  }\n\n  let updatedAccounts: IAccount[] = [];\n\n  accounts.forEach(account => {\n    updatedAccounts.push({\n      accountId: account.account_id,\n      balances: {\n        current: account.balances.current,\n        available: account.balances.available,\n        isoCurrencyCode: account.balances.iso_currency_code,\n      },\n      mask: account.mask,\n      name: account.name,\n      officialName: account.official_name,\n      type: account.type,\n      subtype: account.subtype\n    })\n  });\n\n  var params = {\n    TableName: itemsTableName,\n    Key: {\n      userId,\n      itemId\n    },\n    UpdateExpression: \"set accounts = :a\",\n    ExpressionAttributeValues: {\n      \":a\": updatedAccounts\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n\n  console.log(params);\n\n  try {\n    await ddb.update(params).promise();\n    delete item.accessToken;\n    return formatJSONResponse(200, { ...item, accounts: updatedAccounts });\n  } catch (e) {\n    console.log(e);\n    return formatJSONResponse(500, null);\n  }\n\n}\n\nexport const main = middyfy(getBalances);\n"],"sourceRoot":""}